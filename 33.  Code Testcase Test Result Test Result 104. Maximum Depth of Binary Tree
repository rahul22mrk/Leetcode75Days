/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int maxDepth(TreeNode root) {
        //recursive approach
        //return recursive(root);

        //bfs approach (Level Order Traversal)
        //return bfs(root);

        //dfs Iterative
        return dfsIterative(root);
        
    }

    private int dfsIterative(TreeNode root){
        if(root==null){
            return 0;
        }

        Stack<TreeNode> st = new Stack<TreeNode>();
        Stack<Integer> depth = new Stack<Integer>();
        int maxDepth = 0;

        st.push(root);
        depth.push(1);

        while(!st.isEmpty()){
            TreeNode node = st.pop();
            int currDepth = depth.pop();

            maxDepth = Math.max(maxDepth,currDepth);

            if(node.right!=null){
                st.push(node.right);
                depth.push(currDepth+1);
            }

            if(node.left!=null){
                st.push(node.left);
                depth.push(currDepth+1);
            }
        }
        return maxDepth;
    }

    private int recursive(TreeNode root){
        if(root==null){
            return 0;
        }

        return 1+Math.max(recursive(root.left),recursive(root.right));
    }

    private int bfs(TreeNode root){
        if(root==null){
            return 0;
        }

        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        int maxDepth = 0;
        queue.add(root);

        while(!queue.isEmpty()){
            maxDepth++;
            int levelSize = queue.size();

            for(int i=0;i<levelSize;i++){
                TreeNode node = queue.poll();

                if(node.left!=null){
                    queue.add(node.left);
                }

                if(node.right!=null){
                    queue.add(node.right);
                }
            }
        }
        return maxDepth;
    }
}
